MODULE 1 BEGINS: create new folder in windows explorer
open the new folder in VS code
create two new folders: frontend & backend
open new terminal (ctrl + backticks), do 'npm init' and then add the necessary metadata for the project
verify the newly created package.json file
To install necessary packages, do 'npm install express dotenv mongoose nodemon'  NOTE: npm install nodemon --save-dev
open package.json file again and see that new dependencies are added after the above step
create a new file app.js in backend folder, which will be used to create the express app
create an instance of the express app and export it. The newly created object will have all the methods for the express app
create a new folder called config in backend folder and add an env file to specify enviromental parameters (ex: PORT, environment)
create a new file called server.js in the backend folder which will be receiving the exported app module from app.js file
create a new file called database.js which will be used to establish a mongo DB connection upon call from server.js
create 2 new folders in the backend called controllers & routes
Inside the controllers folder, create new controller file which will have the handler functions
Inside the routes folder, create new route file which will contain the routes to the handler functions
Add the route in the app.js file, then add a middleware 'use' which will specify the endpoint name (ex:/api/v1/products)
Create new folder called models in the backend folder and add in the model file to create new products
Create new function to add new product in the controller and update the URI in the route file
Create new folder in backend called utils and add seeder file to perform mass DB updates
Create functions and routes to handle update and delete product
Create error handling routines along with stack to trace error in modules
Errors handled: product not found, promise/async error, invalid id, unhandled rejection (mongo URI incorrect), unexpected exception
API Features: search for a product, apply filters such as category/price, pagination
Create user model & user auth controller
Add post operation for user registration in auth controller file and new route; Encrypt password using bcrypt package
